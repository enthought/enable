# This workflow targets stable released dependencies from EDM.
# Note that some packages may not actually be installed from EDM but from
# PyPI, see ci/edmtool.py implementations.

name: Test with EDM

# Runs for all Pull Requests and merges to the master branch
# Jobs run on the master branch will skip steps if the cache is already warm.
on:
  pull_request:
  push:
    branches:
      - master

env:
  INSTALL_EDM_VERSION: 3.2.1

jobs:

  # Test against EDM packages on Linux
  test-edm-linux:
    strategy:
      matrix:
        toolkit: ['null', 'pyqt', 'pyqt5', 'pyside2', 'wx']
    runs-on: ubuntu-16.04
    steps:
      - uses: actions/checkout@v2
      - name: Install Qt dependencies for Linux
        run: |
          sudo apt-get update
          sudo apt-get install libxkbcommon-x11-0
        if: matrix.toolkit != 'wx'
      - name: Install Wx dependencies for Linux
        run: |
          sudo apt-get update
          sudo apt-get install libsdl2-2.0-0
        if: matrix.toolkit == 'wx'
      - name: Install GL dependencies for Linux
        run: sudo apt-get install libglu1-mesa-dev
      - name: Cache EDM packages
        id: cacheStep
        uses: actions/cache@v2
        with:
          path: ~/.cache
          key: ${{ runner.os }}-${{ matrix.toolkit }}-${{ hashFiles('ci/edmtool.py') }}
      - name: Setup EDM
        uses: enthought/setup-edm-action@v1
        if: github.event_name == 'pull_request' || steps.cacheStep.outputs.cache-hit != 'true'
        with:
          edm-version: ${{ env.INSTALL_EDM_VERSION }}
      - name: Install click to the default EDM environment
        if: github.event_name == 'pull_request' || steps.cacheStep.outputs.cache-hit != 'true'
        run: edm --config ci/.edm.yaml install -y wheel click coverage
      - name: Install test environment
        if: github.event_name == 'pull_request' || steps.cacheStep.outputs.cache-hit != 'true'
        run: edm run -- python ci/edmtool.py install --toolkit=${{ matrix.toolkit }}
      - name: Run tests
        if: github.event_name == 'pull_request' || steps.cacheStep.outputs.cache-hit != 'true'
        uses: GabrielBB/xvfb-action@v1
        with:
          # kiva agg requires at least 15-bit color depth.
          # The --server-args assumes xvfb-run is called, hence Linux only.
          run: --server-args="-screen 0 1024x768x24" edm run -- python ci/edmtool.py test --toolkit=${{ matrix.toolkit }}

  # Test against EDM packages on Windows and OSX
  test-with-edm:
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
        toolkit: ['pyqt', 'pyqt5', 'pyside2', 'wx']
    runs-on: ${{ matrix.os }}
    env:
      # Set root directory, mainly for Windows, so that the EDM Python
      # environment lives in the same drive as the cloned source. Otherwise
      # 'pip install' raises an error while trying to compute
      # relative path between the site-packages and the source directory.
      EDM_ROOT_DIRECTORY: ${{ github.workspace }}/.edm
    steps:
      - uses: actions/checkout@v2
      - name: Cache EDM packages
        id: cacheStep
        uses: actions/cache@v2
        with:
          path: ~/.cache
          key: ${{ runner.os }}-${{ matrix.toolkit }}-${{ hashFiles('ci/edmtool.py') }}
      - name: Setup EDM
        if: github.event_name == 'pull_request' || steps.cacheStep.outputs.cache-hit != 'true'
        uses: enthought/setup-edm-action@v1
        with:
          edm-version: ${{ env.INSTALL_EDM_VERSION }}
      - name: Install click to the default EDM environment
        if: github.event_name == 'pull_request' || steps.cacheStep.outputs.cache-hit != 'true'
        run: edm --config ci/.edm.yaml install -y wheel click coverage
      - name: Install test environment
        if: github.event_name == 'pull_request' || steps.cacheStep.outputs.cache-hit != 'true'
        run: edm run -- python ci/edmtool.py install --toolkit=${{ matrix.toolkit }}
      - name: Run tests
        if: github.event_name == 'pull_request' || steps.cacheStep.outputs.cache-hit != 'true'
        run: edm run -- python ci/edmtool.py test --toolkit=${{ matrix.toolkit }}
